import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class KMeans {

	// getting random number for each point as cluster assignment
	private static int getRandomNumberInRange(int min, int max) {

		Random r = new Random();
		return r.nextInt((max - min) + 1) + min;
	}

	// class of a point with randomly specified cluster number
	static class Label {
		double[] data;
		int LType;
		String spec;

		public Label(double[] data, String flower) {
			this.LType = getRandomNumberInRange(1, 3);
			this.data = data;
			this.spec = flower;
		}
	}

	static class Result {
		int counter;
		String LType;
		int cluster;

		public Result(int cluster, int counter, String LType) {
			this.counter = counter;
			this.LType = LType;
			this.cluster = cluster;
		}
	}

	// loading data
	public static List<Label> loadDataTrainingSet(String fname) throws FileNotFoundException {
		List<Label> list = new ArrayList<>();
		Scanner input = new Scanner(new File(fname));
		while (input.hasNextLine()) {
			String line = input.nextLine();
			String[] row = line.split(",");
			double[] x = new double[4];
			for (int i = 0; i < row.length - 1; i++) {

				x[i] = Double.parseDouble(row[i]);
			}
			list.add(new Label(x, row[4]));
		}
		input.close();
		return list;
	}

	public KMeans(List<Label> data, int k) {
		List<Label> dataSet = data;

		double[][] centroids = new double[k][4];

//		 for (int i = 0; i < dataSet.size(); i++) {
//		 for (int j = 0; j < dataSet.get(i).data.length; j++) {
//		 System.out.print(dataSet.get(i).data[j] + " ");
//		 }
//		 System.out.print("Name of the flower: " + dataSet.get(i).spec + "Cluster is: " + dataSet.get(i).LType + "\n");
//		 }

		// calculating centroids
		int error = 1;
		while (error != 0) {
			error = 0;
			//
			int numOfCl = 1;
			for (int i = 0; i < centroids.length; i++) {

				for (int j = 0; j < 4; j++) {
					double sum = 0;
					int counter = 0;
					for (int p = 0; p < dataSet.size(); p++) {

						if (dataSet.get(p).LType == numOfCl) {
							counter++;
							sum = sum + dataSet.get(p).data[j];
						}
					}
					centroids[i][j] = sum / counter;
					
				}
				
				numOfCl++;
			}

			System.out.println("-----------Centroids------------" + "\n");
			for (int j = 0; j < centroids.length; j++) {
				for (int i = 0; i < centroids[j].length; i++) {
					System.out.print(centroids[j][i] + " ");
				}
				System.out.println();
			}
//			System.out.println();
//			System.out.println("---------Distnaces for each point-----------" + "\n");
			int minIndex = 0;
			List<Double> dist = new ArrayList<>();
			double sum1 = 0;
			double sum2 = 0;
			double sum3 = 0;
			for (int j = 0; j < dataSet.size(); j++) {

				double result = 0;
				for (int i = 0; i < centroids.length; i++) {
					result = 0;
//					sum1 = 0;
//					sum2 = 0;
//					sum3 = 0;
					for (int p = 0; p < 4; p++) {
						result = result + Math.pow((dataSet.get(j).data[p] - centroids[i][p]), 2);

					
					}
					
//					System.out.println("Distance to centroid " + (i + 1) + " :" + result);
					dist.add(result);
					

				}
				if(dataSet.get(j).LType == 1){
					sum1 = sum1+dist.get(0);
//					System.out.println("Sum1 = " + sum1);
				}else if(dataSet.get(j).LType == 2){
					sum2 = sum2 + dist.get(1);
//					System.out.println("Sum2 = " + sum2);
				}else if(dataSet.get(j).LType == 3){
					sum3 = sum3 + dist.get(2);
//					System.out.println("Sum3 = " + sum3);
//					System.out.println(sum3 + "Element " + dist.get(2));
				}
//				System.out.println("Sum of distances for all clusters :" + " Cluster 1:" + sum1 + "CLuster 2: "+sum2 + " Cluster 3: "+ sum3);

				minIndex = dist.indexOf(Collections.min(dist)) + 1;
				if (dataSet.get(j).LType != minIndex) {
					error++;
					// System.out.println(error);
				}
				dataSet.get(j).LType = minIndex;
				//
				dist.clear();

//				System.out.println("Closest centroid: " + minIndex);

			}
			System.out.println("------------ Sum of squared distances for all clusters----------");
			System.out.println("\n" + "Cluster 1:" + sum1 + "\n" +"CLuster 2: "+sum2 +"\n" + "Cluster 3: "+ sum3);
//			for (int i = 0; i < dataSet.size(); i++) {
//				for (int j = 0; j < dataSet.get(i).data.length; j++) {
//					System.out.print(dataSet.get(i).data[j] + " ");
//				}
//				System.out.print(dataSet.get(i).LType + "\n");
//			}
		}
		
		int vir = 0, set = 0, ver = 0;
		List<Result> clusters = new ArrayList<>();

		for (int p = 1; p <= centroids.length; p++) {
			for (int i = 0; i < dataSet.size(); i++) {
				if (dataSet.get(i).LType == p) {
					if (dataSet.get(i).spec.equals("Iris-virginica")) {
						vir++;

					}
					if (dataSet.get(i).spec.equals("Iris-versicolor")) {
						ver++;

					}
					if (dataSet.get(i).spec.equals("Iris-setosa")) {
						set++;

					}
				}
			}
			clusters.add(new Result(p, vir, "Virginica"));
			clusters.add(new Result(p, ver, "Versicolor"));
			clusters.add(new Result(p, set, "Setosa"));
			vir = 0;
			set = 0;
			ver = 0;

		}
		System.out.println("\n" + "Clusters");
		for (int j = 0; j < clusters.size(); j++) {

			System.out.print(clusters.get(j).counter + "x" + clusters.get(j).LType + ", ");

		}
	}

	public static void main(String[] args) throws FileNotFoundException {
		
		int clusters = 0;
		Scanner sc = new Scanner(System.in);
		System.out.println("Number of clusters: ");
		clusters = sc.nextInt();
		KMeans kMeans = new KMeans(loadDataTrainingSet("train.txt"), clusters);

	}

}
